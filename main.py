## –∑–∞–ø—É—Å–∫ –≤–∏—Ä—É—Ç–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è

#`GismeteoTeleBot\Scripts\activate`


## –≤—ã—Ö–æ–¥ –∏–∑ –≤–∏—Ä—Ç—É–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–∂–µ–Ω–∏—è

#deactivate
import telebot
from telebot import types
import requests
import os
import json
import time
import threading
import schedule
from datetime import datetime
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
bot = telebot.TeleBot(os.getenv("TELEGRAM_TOKEN"))

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è WeatherAPI
API_KEY = os.getenv("OWM_API_KEY")
BASE_URL = "http://api.weatherapi.com/v1/forecast.json"

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
user_settings = {}

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–∫
SETTINGS_FILE = "user_settings.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
def load_user_settings():
    global user_settings
    try:
        if os.path.exists(SETTINGS_FILE):
            with open(SETTINGS_FILE, 'r', encoding='utf-8') as file:
                user_settings = json.load(file)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
        user_settings = {}

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
def save_user_settings():
    try:
        with open(SETTINGS_FILE, 'w', encoding='utf-8') as file:
            json.dump(user_settings, file, ensure_ascii=False, indent=4)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")

# –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ–≥–æ–¥—ã
def get_weather(city_name, days=1):
    try:
        params = {
            'q': city_name,
            'key': API_KEY,
            'days': days,
            'lang': 'ru',
            'aqi': 'no'
        }
        print(f"–û—Ç–ø—Ä–∞–≤–ª—è—é –∑–∞–ø—Ä–æ—Å –∫ API —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏: {params}")
        response = requests.get(BASE_URL, params=params)
        status = response.status_code
        print(f"–ü–æ–ª—É—á–µ–Ω —Å—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: {status}")
       
        if status != 200:
            print(f"–û—à–∏–±–∫–∞ API: {response.text}")
            return None
           
        return response.json()
    except Exception as e:
        print(f"–ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ API: {e}")
        return None

# –ü–æ–ª—É—á–µ–Ω–∏–µ —ç–º–æ–¥–∑–∏ –ø–æ –ø–æ–≥–æ–¥–Ω—ã–º —É—Å–ª–æ–≤–∏—è–º
def get_weather_emoji(condition_text):
    condition_lower = condition_text.lower()
    if '–¥–æ–∂–¥—å' in condition_lower or '–ª–∏–≤–µ–Ω—å' in condition_lower:
        if '—Å–∏–ª—å–Ω—ã–π' in condition_lower:
            return 'üåßÔ∏è'  # –°–∏–ª—å–Ω—ã–π –¥–æ–∂–¥—å
        elif '–Ω–µ–±–æ–ª—å—à–æ–π' in condition_lower or '—Å–ª–∞–±—ã–π' in condition_lower:
            return 'üå¶Ô∏è'  # –ù–µ–±–æ–ª—å—à–æ–π –¥–æ–∂–¥—å
        else:
            return 'üåßÔ∏è'  # –û–±—ã—á–Ω—ã–π –¥–æ–∂–¥—å
    elif '—Å–Ω–µ–≥' in condition_lower:
        return '‚ùÑÔ∏è'  # –°–Ω–µ–≥
    elif '–≥—Ä–æ–∑–∞' in condition_lower or '–≥—Ä–æ–º' in condition_lower:
        return '‚õàÔ∏è'  # –ì—Ä–æ–∑–∞
    elif '—è—Å–Ω–æ' in condition_lower or '—Å–æ–ª–Ω–µ—á–Ω–æ' in condition_lower:
        return '‚òÄÔ∏è'  # –°–æ–ª–Ω–µ—á–Ω–æ
    elif '–æ–±–ª–∞—á–Ω–æ' in condition_lower and ('—á–∞—Å—Ç–∏—á–Ω–æ' in condition_lower or '–ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è' in condition_lower):
        return 'üå§Ô∏è'  # –ß–∞—Å—Ç–∏—á–Ω–æ –æ–±–ª–∞—á–Ω–æ
    elif '–æ–±–ª–∞—á–Ω–æ' in condition_lower:
        return '‚òÅÔ∏è'  # –û–±–ª–∞—á–Ω–æ
    elif '—Ç—É–º–∞–Ω' in condition_lower or '–¥—ã–º–∫–∞' in condition_lower:
        return 'üå´Ô∏è'  # –¢—É–º–∞–Ω
    else:
        return 'üå°Ô∏è'  # –û–±—â–∏–π —Å–ª—É—á–∞–π

# –°—Ç–∞—Ä—Ç –±–æ—Ç–∞
@bot.message_handler(commands=['start'])
def send_welcome(message):
    user_id = str(message.from_user.id)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å –∫–æ–º–∞–Ω–¥–æ–π /start
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    # –°–æ–∑–¥–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if user_id not in user_settings:
        user_settings[user_id] = {
            'city': '',
            'daily_forecast': False,
            'last_message_id': None
        }
        save_user_settings()
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
    button2 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å")
    button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
    button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
    markup.add(button1, button2)
    markup.add(button3, button4)
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    msg = bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–≥–æ–¥–Ω—ã–π –±–æ—Ç. –í—ã–±–µ—Ä–∏—Ç–µ –æ–ø—Ü–∏—é –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:",
        reply_markup=markup
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ –µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è
    user_settings[user_id]['last_message_id'] = msg.message_id
    save_user_settings()

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞
@bot.message_handler(commands=['setcity'])
def set_city_command(message):
    bot.send_message(
        message.chat.id,
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞, –∫–æ—Ç–æ—Ä—ã–π —Ö–æ—Ç–∏—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é:"
    )
    bot.register_next_step_handler(message, save_city)

def save_city(message):
    user_id = str(message.from_user.id)
    city = message.text.strip()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    weather_data = get_weather(city)
    if not weather_data:
        bot.send_message(
            message.chat.id,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö
    if user_id not in user_settings:
        user_settings[user_id] = {'city': city, 'daily_forecast': False, 'last_message_id': None}
    else:
        user_settings[user_id]['city'] = city

    save_user_settings()

    location = weather_data['location']

    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    if user_settings[user_id].get('last_message_id'):
        try:
            bot.delete_message(message.chat.id, user_settings[user_id]['last_message_id'])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

    # –ü–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –≥–æ—Ä–æ–¥–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —Å–æ–æ–±—â–µ–Ω–∏–µ–º –æ–± —É—Å–ø–µ—à–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–µ
    msg = bot.send_message(
        message.chat.id,
        f"–ì–æ—Ä–æ–¥ {location['name']} ({location['country']}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –≤–∞—à –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.",
        reply_markup=main_menu_markup()
    )

    user_settings[user_id]['last_message_id'] = msg.message_id
    save_user_settings()

def main_menu_markup():
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    markup.add(
        types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å"),
        types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è"),
        types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è"),
        types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
    )
    return markup


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@bot.message_handler(content_types=['text'])
def handle_text(message):
    user_id = str(message.from_user.id)
    
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–µ—Å–ª–∏ —ç—Ç–æ —Ä–∞–∑—Ä–µ—à–µ–Ω–æ API Telegram)
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except Exception as e:
        print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
    
    if message.text == "–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å":
        if user_id in user_settings and user_settings[user_id]['city']:
            city = user_settings[user_id]['city']
            delete_last_bot_message(message.chat.id, user_id)
            send_current_weather(message, city)
        else:
            msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
            user_settings[user_id]['last_message_id'] = msg.message_id
            save_user_settings()
            bot.register_next_step_handler(message, process_city_for_current)
    
    elif message.text == "–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è":  # –ò–∑–º–µ–Ω–µ–Ω–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–Ω–æ–ø–∫–∏
        if user_id in user_settings and user_settings[user_id]['city']:
            city = user_settings[user_id]['city']
            delete_last_bot_message(message.chat.id, user_id)

            send_day_forecast(message, city)
        else:
            msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
            user_settings[user_id]['last_message_id'] = msg.message_id
            save_user_settings()
            bot.register_next_step_handler(message, process_city_for_day_forecast)
    
    elif message.text == "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å":  # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É —Å—Ç–∞—Ä–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        if user_id in user_settings and user_settings[user_id]['city']:
            city = user_settings[user_id]['city']
            delete_last_bot_message(message.chat.id, user_id)

            send_day_forecast(message, city)
        else:
            msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
            user_settings[user_id]['last_message_id'] = msg.message_id
            save_user_settings()
            bot.register_next_step_handler(message, process_city_for_day_forecast)
    
    elif message.text == "–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è":
        if user_id in user_settings and user_settings[user_id]['city']:
            city = user_settings[user_id]['city']
            delete_last_bot_message(message.chat.id, user_id)
            send_three_day_forecast(message, city)
        else:
            msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
            user_settings[user_id]['last_message_id'] = msg.message_id
            save_user_settings()
            bot.register_next_step_handler(message, process_city_for_three_days)
    
    elif message.text == "–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è":
        delete_last_bot_message(message.chat.id, user_id)
        show_settings(message)
    
    elif message.text == "–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥":
        msg = bot.send_message(message.chat.id, "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:")
        user_settings[user_id]['last_message_id'] = msg.message_id
        save_user_settings()
        delete_last_bot_message(message.chat.id, user_id)

        bot.register_next_step_handler(message, save_city)
    
    elif message.text == "–í–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑":
        if user_id in user_settings and user_settings[user_id]['city']:
            user_settings[user_id]['daily_forecast'] = True
            save_user_settings()
            # –ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
            delete_last_bot_message(message.chat.id, user_id)

            show_main_menu_with_message(message, f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ 6:00 –≤–∫–ª—é—á–µ–Ω –¥–ª—è –≥–æ—Ä–æ–¥–∞ {user_settings[user_id]['city']}.")
        else:
            msg = bot.send_message(
                message.chat.id,
                "–°–Ω–∞—á–∞–ª–∞ –Ω—É–∂–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞:"
            )
            user_settings[user_id]['last_message_id'] = msg.message_id
            save_user_settings()
            delete_last_bot_message(message.chat.id, user_id)

            bot.register_next_step_handler(message, save_city_and_enable_daily)
    
    elif message.text == "–í—ã–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑":
        user_settings[user_id]['daily_forecast'] = False
        save_user_settings()
        # –ü–æ—Å–ª–µ –≤—ã–∫–ª—é—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
        show_main_menu_with_message(message, "–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤—ã–∫–ª—é—á–µ–Ω.")
    
    elif message.text == "–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        show_main_menu(message)
    
    else:
        # –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–µ–ª –Ω–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
        city = message.text.strip()
        delete_last_bot_message(message.chat.id, user_id)

        send_current_weather(message, city)

def process_city_for_current(message):
    city = message.text.strip()
    send_current_weather(message, city)

def process_city_for_day_forecast(message):
    city = message.text.strip()
    send_day_forecast(message, city)

def process_city_for_three_days(message):
    city = message.text.strip()
    send_three_day_forecast(message, city)

def save_city_and_enable_daily(message):
    user_id = str(message.from_user.id)
    city = message.text.strip()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞
    weather_data = get_weather(city)
    if not weather_data:
        bot.send_message(
            message.chat.id,
            "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ç–∞–∫–æ–π –≥–æ—Ä–æ–¥. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )
        return
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ –≤ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –∏ –≤–∫–ª—é—á–∞–µ–º –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑
    if user_id not in user_settings:
        user_settings[user_id] = {'city': city, 'daily_forecast': True, 'last_message_id': None}
    else:
        user_settings[user_id]['city'] = city
        user_settings[user_id]['daily_forecast'] = True
    
    save_user_settings()
    
    location = weather_data['location']
    # –ü–æ—Å–ª–µ –≤–∫–ª—é—á–µ–Ω–∏—è –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    show_main_menu_with_message(
        message,
        f"–ì–æ—Ä–æ–¥ {location['name']} ({location['country']}) —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∫–∞–∫ –≤–∞—à –≥–æ—Ä–æ–¥ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é.\n"
        f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –≤ 6:00 –≤–∫–ª—é—á–µ–Ω."
    )
def show_settings(message):
    user_id = str(message.from_user.id)
    
    # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    delete_last_bot_message(message.chat.id, user_id)

    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn1 = types.KeyboardButton("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≥–æ—Ä–æ–¥")
    if user_settings[user_id].get('daily_forecast', False):
        btn2 = types.KeyboardButton("–í—ã–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
    else:
        btn2 = types.KeyboardButton("–í–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑")
    back = types.KeyboardButton("–í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")
    markup.add(btn1, btn2, back)
    
    settings_text = "–ù–∞—Å—Ç—Ä–æ–π–∫–∏:\n\n"
    if user_settings[user_id].get('city'):
        settings_text += f"–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: {user_settings[user_id]['city']}\n"
    else:
        settings_text += "–¢–µ–∫—É—â–∏–π –≥–æ—Ä–æ–¥: –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω\n"
    settings_text += f"–ï–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑: {'–í–∫–ª—é—á–µ–Ω' if user_settings[user_id].get('daily_forecast', False) else '–í—ã–∫–ª—é—á–µ–Ω'}"
    
    msg = bot.send_message(message.chat.id, settings_text, reply_markup=markup)
    
    user_settings[user_id]['last_message_id'] = msg.message_id
    save_user_settings()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é —Å —É–ª—É—á—à–µ–Ω–Ω—ã–º–∏ –Ω–∞–∑–≤–∞–Ω–∏—è–º–∏ –∫–Ω–æ–ø–æ–∫
def show_main_menu(message):
    user_id = str(message.from_user.id)
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
    button2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
    button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
    markup.add(button1, button2)
    markup.add(button3, button4)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if user_id in user_settings and user_settings[user_id].get('last_message_id'):
        try:
            bot.delete_message(message.chat.id, user_settings[user_id]['last_message_id'])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    msg = bot.send_message(
        message.chat.id,
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
        reply_markup=markup
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    user_settings[user_id]['last_message_id'] = msg.message_id
    save_user_settings()

def delete_last_bot_message(chat_id, user_id):
    if user_id in user_settings and user_settings[user_id].get('last_message_id'):
        try:
            bot.delete_message(chat_id, user_settings[user_id]['last_message_id'])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")

def show_main_menu_with_message(message, text):
    user_id = str(message.from_user.id)
    
    # –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
    button2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
    button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
    button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
    markup.add(button1, button2)
    markup.add(button3, button4)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if user_id in user_settings and user_settings[user_id].get('last_message_id'):
        try:
            bot.delete_message(message.chat.id, user_settings[user_id]['last_message_id'])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    msg = bot.send_message(
        message.chat.id,
        text,
        reply_markup=markup
    )
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
    user_settings[user_id]['last_message_id'] = msg.message_id
    save_user_settings()

def send_current_weather(message, city):
    user_id = str(message.from_user.id)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if user_id in user_settings and user_settings[user_id].get('last_message_id'):
        try:
            bot.delete_message(message.chat.id, user_settings[user_id]['last_message_id'])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    try:
        weather_data = get_weather(city)
        
        if not weather_data:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
            button2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
            button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
            markup.add(button1, button2)
            markup.add(button3, button4)
            
            msg = bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ üòî", reply_markup=markup)
            user_settings[user_id]['last_message_id'] = msg.message_id
            save_user_settings()
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        current = weather_data['current']
        location = weather_data['location']
        
        temp = current['temp_c']
        feels_like = current['feelslike_c']
        humidity = current['humidity']
        wind_speed = current['wind_kph'] / 3.6  # –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∏–∑ –∫–º/—á –≤ –º/—Å
        description = current['condition']['text']
        
        # –ü–æ–ª—É—á–∞–µ–º —ç–º–æ–¥–∑–∏
        weather_emoji = get_weather_emoji(description)
        
        response_text = (
            f"{weather_emoji} –°–µ–π—á–∞—Å –ø–æ–≥–æ–¥–∞ –≤ {location['name']} ({location['country']}):\n"
            f"{description}\n"
            f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {temp}¬∞C (–æ—â—É—â–∞–µ—Ç—Å—è –∫–∞–∫ {feels_like}¬∞C)\n"
            f"üíß –í–ª–∞–∂–Ω–æ—Å—Ç—å: {humidity}%\n"
            f"üí® –í–µ—Ç–µ—Ä: {wind_speed:.1f} –º/—Å"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
        button2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
        button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
        markup.add(button1, button2)
        markup.add(button3, button4)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(message.chat.id, response_text, reply_markup=markup)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–æ—Ä–æ–¥
        if user_id not in user_settings:
            user_settings[user_id] = {'city': city, 'daily_forecast': False, 'last_message_id': msg.message_id}
        else:
            user_settings[user_id]['last_message_id'] = msg.message_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not user_settings[user_id].get('city'):
                user_settings[user_id]['city'] = city
        save_user_settings()
    
    except Exception as e:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
        button2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
        button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
        markup.add(button1, button2)
        markup.add(button3, button4)
        
        msg = bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=markup)
        user_settings[user_id]['last_message_id'] = msg.message_id
        save_user_settings()
        print(f"–û—à–∏–±–∫–∞: {e}")

def send_day_forecast(message, city):
    user_id = str(message.from_user.id)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if user_id in user_settings and user_settings[user_id].get('last_message_id'):
        try:
            bot.delete_message(message.chat.id, user_settings[user_id]['last_message_id'])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    try:
        weather_data = get_weather(city, days=1)
        
        if not weather_data:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
            button2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
            button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
            markup.add(button1, button2)
            markup.add(button3, button4)
            
            msg = bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ üòî", reply_markup=markup)
            user_settings[user_id]['last_message_id'] = msg.message_id
            save_user_settings()
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        forecast = weather_data['forecast']['forecastday'][0]
        location = weather_data['location']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º
        morning = next((hour for hour in forecast['hour'] if hour['time'].endswith('06:00')), None)
        noon = next((hour for hour in forecast['hour'] if hour['time'].endswith('12:00')), None)
        afternoon = next((hour for hour in forecast['hour'] if hour['time'].endswith('15:00')), None)
        evening = next((hour for hour in forecast['hour'] if hour['time'].endswith('18:00')), None)
        night = next((hour for hour in forecast['hour'] if hour['time'].endswith('00:00')), None)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
        date_str = datetime.strptime(forecast['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
        
        response_text = f"üóì –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {date_str} –¥–ª—è {location['name']} ({location['country']}):\n\n"
        
        if morning:
            morning_emoji = get_weather_emoji(morning['condition']['text'])
            response_text += (
                f"üåÖ –£—Ç—Ä–æ (6:00): {morning_emoji} {morning['condition']['text']}\n"
                f"   üå° {morning['temp_c']}¬∞C, üí® {morning['wind_kph']/3.6:.1f} –º/—Å\n\n"
            )
        
        if noon:
            noon_emoji = get_weather_emoji(noon['condition']['text'])
            response_text += (
                f"üåû –î–µ–Ω—å (12:00): {noon_emoji} {noon['condition']['text']}\n"
                f"   üå° {noon['temp_c']}¬∞C, üí® {noon['wind_kph']/3.6:.1f} –º/—Å\n\n"
            )
        
        if afternoon:
            afternoon_emoji = get_weather_emoji(afternoon['condition']['text'])
            response_text += (
                f"üïí –ü–æ—Å–ª–µ –æ–±–µ–¥–∞ (15:00): {afternoon_emoji} {afternoon['condition']['text']}\n"
                f"   üå° {afternoon['temp_c']}¬∞C, üí® {afternoon['wind_kph']/3.6:.1f} –º/—Å\n\n"
            )
        
        if evening:
            evening_emoji = get_weather_emoji(evening['condition']['text'])
            response_text += (
                f"üåÜ –í–µ—á–µ—Ä (18:00): {evening_emoji} {evening['condition']['text']}\n"
                f"   üå° {evening['temp_c']}¬∞C, üí® {evening['wind_kph']/3.6:.1f} –º/—Å\n\n"
            )
        
        if night:
            night_emoji = get_weather_emoji(night['condition']['text'])
            response_text += (
                f"üåô –ù–æ—á—å (00:00): {night_emoji} {night['condition']['text']}\n"
                f"   üå° {night['temp_c']}¬∞C, üí® {night['wind_kph']/3.6:.1f} –º/—Å\n\n"
            )
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –¥–µ–Ω—å
        day = forecast['day']
        response_text += (
            f"üìä –í —Ü–µ–ª–æ–º –∑–∞ –¥–µ–Ω—å:\n"
            f"   –ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['mintemp_c']}¬∞C\n"
            f"   –ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['maxtemp_c']}¬∞C\n"
            f"   –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['avgtemp_c']}¬∞C\n"
            f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {day['daily_chance_of_rain']}%\n"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
        button2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
        button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
        markup.add(button1, button2)
        markup.add(button3, button4)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(message.chat.id, response_text, reply_markup=markup)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–æ—Ä–æ–¥
        if user_id not in user_settings:
            user_settings[user_id] = {'city': city, 'daily_forecast': False, 'last_message_id': msg.message_id}
        else:
            user_settings[user_id]['last_message_id'] = msg.message_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not user_settings[user_id].get('city'):
                user_settings[user_id]['city'] = city
        save_user_settings()
    
    except Exception as e:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
        button2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
        button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
        markup.add(button1, button2)
        markup.add(button3, button4)
        
        msg = bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=markup)
        user_settings[user_id]['last_message_id'] = msg.message_id
        save_user_settings()
        print(f"–û—à–∏–±–∫–∞: {e}")

def send_three_day_forecast(message, city):
    user_id = str(message.from_user.id)
    
    # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–æ—Ç–∞, –µ—Å–ª–∏ –æ–Ω–æ –µ—Å—Ç—å
    if user_id in user_settings and user_settings[user_id].get('last_message_id'):
        try:
            bot.delete_message(message.chat.id, user_settings[user_id]['last_message_id'])
        except Exception as e:
            print(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ: {e}")
    
    try:
        weather_data = get_weather(city, days=3)
        
        if not weather_data:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
            button2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
            button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
            button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
            markup.add(button1, button2)
            markup.add(button3, button4)
            
            msg = bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ üòî", reply_markup=markup)
            user_settings[user_id]['last_message_id'] = msg.message_id
            save_user_settings()
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        forecast_days = weather_data['forecast']['forecastday']
        location = weather_data['location']
        
        response_text = f"üóì –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è –¥–ª—è {location['name']} ({location['country']}):\n\n"
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–Ω—è–º –ø—Ä–æ–≥–Ω–æ–∑–∞
        for forecast in forecast_days:
            date = datetime.strptime(forecast['date'], '%Y-%m-%d')
            date_str = date.strftime('%d.%m.%Y')
            day_name = date.strftime('%A')
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            days_ru = {
                'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
                'Wednesday': '–°—Ä–µ–¥–∞',
                'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                'Saturday': '–°—É–±–±–æ—Ç–∞',
                'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            }
            day_name_ru = days_ru.get(day_name, day_name)
            
            day = forecast['day']
            condition = day['condition']['text']
            condition_emoji = get_weather_emoji(condition)
            
            response_text += (
                f"üìÖ {day_name_ru}, {date_str}:\n"
                f"   {condition_emoji} {condition}\n"
                f"   üå° {day['mintemp_c']}¬∞C - {day['maxtemp_c']}¬∞C (—Å—Ä–µ–¥–Ω—è—è: {day['avgtemp_c']}¬∞C)\n"
                f"   üí® –ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {day['maxwind_kph']/3.6:.1f} –º/—Å\n"
                f"   üíß –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {day['daily_chance_of_rain']}%\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
        button2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
        button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
        markup.add(button1, button2)
        markup.add(button3, button4)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(message.chat.id, response_text, reply_markup=markup)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–æ—Ä–æ–¥
        if user_id not in user_settings:
            user_settings[user_id] = {'city': city, 'daily_forecast': False, 'last_message_id': msg.message_id}
        else:
            user_settings[user_id]['last_message_id'] = msg.message_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not user_settings[user_id].get('city'):
                user_settings[user_id]['city'] = city
        save_user_settings()
    
    except Exception as e:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
        button2 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è")
        button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
        button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
        markup.add(button1, button2)
        markup.add(button3, button4)
        
        msg = bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=markup)
        user_settings[user_id]['last_message_id'] = msg.message_id
        save_user_settings()
        print(f"–û—à–∏–±–∫–∞: {e}")

def send_day_forecast(message, city):
    user_id = str(message.from_user.id)
    
    try:
        weather_data = get_weather(city, days=1)
        
        if not weather_data:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–Ω–æ–≤–æ
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
            button2 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å")
            button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
            button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
            markup.add(button1, button2)
            markup.add(button3, button4)
            
            msg = bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ üòî", reply_markup=markup)
            user_settings[user_id]['last_message_id'] = msg.message_id
            save_user_settings()
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        forecast = weather_data['forecast']['forecastday'][0]
        location = weather_data['location']
        
        # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º (—É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä, –Ω–æ—á—å)
        # –£—Ç—Ä–æ (6:00)
        morning = next((hour for hour in forecast['hour'] if hour['time'].endswith('06:00')), None)
        # –î–µ–Ω—å (12:00)
        noon = next((hour for hour in forecast['hour'] if hour['time'].endswith('12:00')), None)
        # –î–µ–Ω—å (15:00)
        afternoon = next((hour for hour in forecast['hour'] if hour['time'].endswith('15:00')), None)
        # –í–µ—á–µ—Ä (18:00)
        evening = next((hour for hour in forecast['hour'] if hour['time'].endswith('18:00')), None)
        # –ù–æ—á—å (00:00)
        night = next((hour for hour in forecast['hour'] if hour['time'].endswith('00:00')), None)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞
        date_str = datetime.strptime(forecast['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
        
        response_text = f"üóì –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {date_str} –¥–ª—è {location['name']} ({location['country']}):\n\n"
        
        if morning:
            morning_emoji = get_weather_emoji(morning['condition']['text'])
            response_text += (
                f"üåÖ –£—Ç—Ä–æ (6:00): {morning_emoji} {morning['condition']['text']}\n"
                f"   üå° {morning['temp_c']}¬∞C, üí® {morning['wind_kph']/3.6:.1f} –º/—Å\n\n"
            )
        
        if noon:
            noon_emoji = get_weather_emoji(noon['condition']['text'])
            response_text += (
                f"üåû –î–µ–Ω—å (12:00): {noon_emoji} {noon['condition']['text']}\n"
                f"   üå° {noon['temp_c']}¬∞C, üí® {noon['wind_kph']/3.6:.1f} –º/—Å\n\n"
            )
        
        if afternoon:
            afternoon_emoji = get_weather_emoji(afternoon['condition']['text'])
            response_text += (
                f"üïí –ü–æ—Å–ª–µ –æ–±–µ–¥–∞ (15:00): {afternoon_emoji} {afternoon['condition']['text']}\n"
                f"   üå° {afternoon['temp_c']}¬∞C, üí® {afternoon['wind_kph']/3.6:.1f} –º/—Å\n\n"
            )
        
        if evening:
            evening_emoji = get_weather_emoji(evening['condition']['text'])
            response_text += (
                f"üåÜ –í–µ—á–µ—Ä (18:00): {evening_emoji} {evening['condition']['text']}\n"
                f"   üå° {evening['temp_c']}¬∞C, üí® {evening['wind_kph']/3.6:.1f} –º/—Å\n\n"
            )
        
        if night:
            night_emoji = get_weather_emoji(night['condition']['text'])
            response_text += (
                f"üåô –ù–æ—á—å (00:00): {night_emoji} {night['condition']['text']}\n"
                f"   üå° {night['temp_c']}¬∞C, üí® {night['wind_kph']/3.6:.1f} –º/—Å\n\n"
            )
        
        # –û–±—â–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –∑–∞ –¥–µ–Ω—å
        day = forecast['day']
        response_text += (
            f"üìä –í —Ü–µ–ª–æ–º –∑–∞ –¥–µ–Ω—å:\n"
            f"   –ú–∏–Ω. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['mintemp_c']}¬∞C\n"
            f"   –ú–∞–∫—Å. —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['maxtemp_c']}¬∞C\n"
            f"   –°—Ä–µ–¥–Ω—è—è —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['avgtemp_c']}¬∞C\n"
            f"   –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {day['daily_chance_of_rain']}%\n"
        )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–Ω–æ–≤–æ
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
        button2 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å")
        button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
        button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
        markup.add(button1, button2)
        markup.add(button3, button4)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(message.chat.id, response_text, reply_markup=markup)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–æ—Ä–æ–¥
        if user_id not in user_settings:
            user_settings[user_id] = {'city': city, 'daily_forecast': False, 'last_message_id': msg.message_id}
        else:
            user_settings[user_id]['last_message_id'] = msg.message_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not user_settings[user_id].get('city'):
                user_settings[user_id]['city'] = city
        save_user_settings()
    
    except Exception as e:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–Ω–æ–≤–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
        button2 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å")
        button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
        button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
        markup.add(button1, button2)
        markup.add(button3, button4)
        
        msg = bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=markup)
        user_settings[user_id]['last_message_id'] = msg.message_id
        save_user_settings()
        print(f"–û—à–∏–±–∫–∞: {e}")

def send_three_day_forecast(message, city):

    user_id = str(message.from_user.id)
    delete_last_bot_message(message.chat.id, user_id)

    try:
        weather_data = get_weather(city, days=3)
        
        if not weather_data:
            # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–Ω–æ–≤–æ
            markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
            button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
            button2 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å")
            button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
            button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
            markup.add(button1, button2)
            markup.add(button3, button4)
            
            msg = bot.send_message(message.chat.id, "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ üòî", reply_markup=markup)
            user_settings[user_id]['last_message_id'] = msg.message_id
            save_user_settings()
            return
        
        # –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        forecast_days = weather_data['forecast']['forecastday']
        location = weather_data['location']
        
        response_text = f"üóì –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ 3 –¥–Ω—è –¥–ª—è {location['name']} ({location['country']}):\n\n"
        
        # –ü—Ä–æ—Ö–æ–¥–∏–º –ø–æ –≤—Å–µ–º –¥–Ω—è–º –ø—Ä–æ–≥–Ω–æ–∑–∞
        for forecast in forecast_days:
            date = datetime.strptime(forecast['date'], '%Y-%m-%d')
            date_str = date.strftime('%d.%m.%Y')
            day_name = date.strftime('%A')
            
            # –ü–µ—Ä–µ–≤–æ–¥–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–∏–π
            days_ru = {
                'Monday': '–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫',
                'Tuesday': '–í—Ç–æ—Ä–Ω–∏–∫',
                'Wednesday': '–°—Ä–µ–¥–∞',
                'Thursday': '–ß–µ—Ç–≤–µ—Ä–≥',
                'Friday': '–ü—è—Ç–Ω–∏—Ü–∞',
                'Saturday': '–°—É–±–±–æ—Ç–∞',
                'Sunday': '–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ'
            }
            day_name_ru = days_ru.get(day_name, day_name)
            
            day = forecast['day']
            condition = day['condition']['text']
            condition_emoji = get_weather_emoji(condition)
            
            response_text += (
                f"üìÖ {day_name_ru}, {date_str}:\n"
                f"   {condition_emoji} {condition}\n"
                f"   üå° {day['mintemp_c']}¬∞C - {day['maxtemp_c']}¬∞C (—Å—Ä–µ–¥–Ω—è—è: {day['avgtemp_c']}¬∞C)\n"
                f"   üí® –ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {day['maxwind_kph']/3.6:.1f} –º/—Å\n"
                f"   üíß –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {day['daily_chance_of_rain']}%\n\n"
            )
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–Ω–æ–≤–æ
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
        button2 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å")
        button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
        button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
        markup.add(button1, button2)
        markup.add(button3, button4)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–ª–∞–≤–∏–∞—Ç—É—Ä–æ–π
        msg = bot.send_message(message.chat.id, response_text, reply_markup=markup)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≥–æ—Ä–æ–¥
        if user_id not in user_settings:
            user_settings[user_id] = {'city': city, 'daily_forecast': False, 'last_message_id': msg.message_id}
        else:
            user_settings[user_id]['last_message_id'] = msg.message_id
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≥–æ—Ä–æ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –æ–Ω –µ—â–µ –Ω–µ –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            if not user_settings[user_id].get('city'):
                user_settings[user_id]['city'] = city
        save_user_settings()
    
    except Exception as e:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∑–∞–Ω–æ–≤–æ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
        markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        button1 = types.KeyboardButton("–ü–æ–≥–æ–¥–∞ —Å–µ–π—á–∞—Å")
        button2 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ –¥–µ–Ω—å")
        button3 = types.KeyboardButton("–ü—Ä–æ–≥–Ω–æ–∑ –Ω–∞ 3 –¥–Ω—è")
        button4 = types.KeyboardButton("–ù–∞—Å—Ç—Ä–æ–π–∫–∏‚öôÔ∏è")
        markup.add(button1, button2)
        markup.add(button3, button4)
        
        msg = bot.send_message(message.chat.id, "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑", reply_markup=markup)
        user_settings[user_id]['last_message_id'] = msg.message_id
        save_user_settings()
        print(f"–û—à–∏–±–∫–∞: {e}")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –≤—Å–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º, –∫–æ—Ç–æ—Ä—ã–µ –µ–≥–æ –≤–∫–ª—é—á–∏–ª–∏
def send_daily_forecasts():
    print("–ó–∞–ø—É—Å–∫ —Ñ—É–Ω–∫—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤")
    for user_id, settings in user_settings.items():
        if settings.get('daily_forecast') and settings.get('city'):
            try:
                chat_id = int(user_id)
                city = settings['city']
                weather_data = get_weather(city, days=1)
                
                if not weather_data:
                    bot.send_message(chat_id, f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ –ø–æ–≥–æ–¥–µ –¥–ª—è {city} üòî")
                    continue
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –ø—Ä–æ–≥–Ω–æ–∑–∞ –Ω–∞ –¥–µ–Ω—å
                forecast = weather_data['forecast']['forecastday'][0]
                location = weather_data['location']
                day = forecast['day']
                condition = day['condition']['text']
                condition_emoji = get_weather_emoji(condition)
                
                date_str = datetime.strptime(forecast['date'], '%Y-%m-%d').strftime('%d.%m.%Y')
                
                response_text = (
                    f"üîî –î–æ–±—Ä–æ–µ —É—Ç—Ä–æ! –ü—Ä–æ–≥–Ω–æ–∑ –ø–æ–≥–æ–¥—ã –Ω–∞ {date_str} –¥–ª—è {location['name']} ({location['country']}):\n\n"
                    f"{condition_emoji} {condition}\n"
                    f"üå° –¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞: {day['mintemp_c']}¬∞C - {day['maxtemp_c']}¬∞C (—Å—Ä–µ–¥–Ω—è—è: {day['avgtemp_c']}¬∞C)\n"
                    f"üí® –ú–∞–∫—Å. —Å–∫–æ—Ä–æ—Å—Ç—å –≤–µ—Ç—Ä–∞: {day['maxwind_kph']/3.6:.1f} –º/—Å\n"
                    f"üíß –í–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—å –æ—Å–∞–¥–∫–æ–≤: {day['daily_chance_of_rain']}%\n"
                )
                
                # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ —á–∞—Å–∞–º (—É—Ç—Ä–æ, –¥–µ–Ω—å, –≤–µ—á–µ—Ä)
                morning = next((hour for hour in forecast['hour'] if hour['time'].endswith('06:00')), None)
                noon = next((hour for hour in forecast['hour'] if hour['time'].endswith('12:00')), None)
                evening = next((hour for hour in forecast['hour'] if hour['time'].endswith('18:00')), None)
                
                if morning:
                    morning_emoji = get_weather_emoji(morning['condition']['text'])
                    response_text += f"\nüåÖ –£—Ç—Ä–æ (6:00): {morning_emoji} {morning['temp_c']}¬∞C, {morning['condition']['text']}"
                
                if noon:
                    noon_emoji = get_weather_emoji(noon['condition']['text'])
                    response_text += f"\nüåû –î–µ–Ω—å (12:00): {noon_emoji} {noon['temp_c']}¬∞C, {noon['condition']['text']}"
                
                if evening:
                    evening_emoji = get_weather_emoji(evening['condition']['text'])
                    response_text += f"\nüåÜ –í–µ—á–µ—Ä (18:00): {evening_emoji} {evening['temp_c']}¬∞C, {evening['condition']['text']}"
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–≥–Ω–æ–∑
                bot.send_message(chat_id, response_text)
                print(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–π –ø—Ä–æ–≥–Ω–æ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            except Exception as e:
                print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–≥–æ –ø—Ä–æ–≥–Ω–æ–∑–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã—Ö –ø—Ä–æ–≥–Ω–æ–∑–æ–≤
def schedule_daily_forecasts():
    schedule.every().day.at("06:00").do(send_daily_forecasts)
    
    while True:
        schedule.run_pending()
        time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É

# –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def start_scheduler():
    scheduler_thread = threading.Thread(target=schedule_daily_forecasts)
    scheduler_thread.daemon = True
    scheduler_thread.start()

if __name__ == "__main__":
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω. –ù–∞–∂–º–∏—Ç–µ Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        load_user_settings()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
        start_scheduler()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        bot.polling(none_stop=True)
    except Exception as e:
        print(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –±–æ—Ç–∞: {e}")